import numpy as np
#General Hebbian Algorithm function
def gha(X,pcs,learning_rate=0.1,iterations=20000):
  t=0
  W=np.random.normal(scale=0.1, size=(pcs, len(X[0,:])))
  #print(W)
  for _ in range(iterations):
    dw=np.zeros(W.shape)
    y=np.dot(W,X.T)
    h=np.dot(y,X)
    ah=np.tril(np.dot(y,y.T))
    dw=learning_rate/(_+1)*(h-np.dot(ah,W))
    W+=dw
    W=normalize(W)
  return W
